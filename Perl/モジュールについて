モジュールを理解するために参考サイトを丸写しします。
参考サイト：：https://qiita.com/tadnakam/items/485fe6fd1cf79f3cb97c

1.モジュールとは「メインプログラムや他のモジュールから呼び出せる関数を入れてておくファイル」
sample.pm
sub func1{
  my $x = shift;
  return $x *2;
}
1;

test.pl
require "sample.pm";
my $y = func1(10);
print "$y\n";

この例は非常に簡単に書いているため、パッケージ名を与えていません。
たいては、package関数を使ってパッケージ名を指定します。
パッケージとは名前空間のような物で、複数のモジュールを使う場合、名前が衝突しないようにパッケージ名で衝突を回避します。


では本題
「Perlのクラス」
Perlのクラスはモジュールの一種として定義します。
ただし、、、、
・パッケージ名が必要
・コンストラクタが必要
・コンストラクタはbless関数の値を返す。

という縛りがあります。

Class1というクラス
Class1.pm

package Class1;

#コンストラクタ
sub new {
  my %self; #メンバ変数を保持する連想配列
  my $class = shift; #第1パラメータの内容はクラス名、ココではClass1。
  $self->{value} = 0; #メンバ変数 value を初期化。
  return bless $self, $class; #メンバ変数を保持する連想配列をクラス名に連携する。
}

#値を返す
sub get {
  my $self = shift; #第1引数は　Class1 オブジェクト（メンバ変数を保持する連想配列）
  return $self->{value}; #連想配列のメンバ'value'の値を返す。
}

#値を変更する
sub set{
  my $self = shift; #第1引数はClass1オブジェクト（メンバ変数を保持する連想配列)
  $self->{value} = shift; #連想配列のメンバ'value'の値を変更する。
}

1;


テストプログラム
test1.pl

require "Class1.pm";

my $obj = Class1->new; #Class1のコンストラクタを呼出インスタンス化
print $obj->get. "\n"; #初期値が０であることを確認。
$obj->set(5); #値を書き換える
print 　$obj->get. "\n" #値が5になったことを確認。



これを見るとオブジェクト指向の仕組みがわかる？？
オブジェクトの実態はハッシュ（連想配列）!!
メソッドは単なる関数ですが、常い第1引数がオブジェクト。
このオブジェクト（連想配列）を使っていろいろメソッドとしての動作を動作する



ちょっとわかってきたかも
